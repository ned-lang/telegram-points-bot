import os
import sqlite3
import asyncio
from threading import Thread
from flask import Flask
from telegram.ext import Application, CommandHandler

# === Flask –¥–ª—è Render ===
app_web = Flask(__name__)

@app_web.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

def run_web():
    port = int(os.environ.get("PORT", 10000))
    app_web.run(host="0.0.0.0", port=port)

# === Telegram Bot ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

DB_FILE = "casino.db"

def ensure_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 1000
    )""")
    conn.commit()
    conn.close()

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, ?)", (user_id, 1000))
    conn.commit()
    conn.close()
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞!\n"
                                    "–ò—Å–ø–æ–ª—å–∑—É–π /bet –¥–ª—è —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.")

async def bet(update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        balance = 1000
        cur.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, balance))
    else:
        balance = row[0]

    if balance < 100:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üí∏")
    else:
        # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: 50% –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à
        import random
        if random.choice([True, False]):
            balance += 100
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª +100! üéâ"
        else:
            balance -= 100
            result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª -100 üò¢"

        cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (balance, user_id))
        await update.message.reply_text(f"{result}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")

    conn.commit()
    conn.close()

async def balance(update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        await update.message.reply_text(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {row[0]}")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start.")

# --- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def run_bot():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("balance", balance))

    print("Bot started (polling)...")
    await app.run_polling()

def main():
    ensure_db()

    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = Thread(target=run_web, daemon=True)
    web_thread.start()

    # Telegram-–±–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(run_bot())

if __name__ == "__main__":
    main()
