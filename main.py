import os
import sqlite3
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler

# === Flask (–¥–ª—è Render) ===
app_web = Flask(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

WEBHOOK_PATH = f"/webhook/{TOKEN}"   # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

DB_FILE = "casino.db"

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def ensure_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 1000
    )""")
    conn.commit()
    conn.close()

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, ?)", (user_id, 1000))
    conn.commit()
    conn.close()
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üé∞!\n–ò—Å–ø–æ–ª—å–∑—É–π /bet –¥–ª—è —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.")

async def bet(update: Update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        balance = 1000
        cur.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, balance))
    else:
        balance = row[0]

    if balance < 100:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ üí∏")
    else:
        import random
        if random.choice([True, False]):
            balance += 100
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª +100! üéâ"
        else:
            balance -= 100
            result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª -100 üò¢"

        cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (balance, user_id))
        await update.message.reply_text(f"{result}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")

    conn.commit()
    conn.close()

async def balance(update: Update, context):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {row[0]}")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start.")

# === Telegram Application ===
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("bet", bet))
application.add_handler(CommandHandler("balance", balance))

# === Flask routes ===
@app_web.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

@app_web.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    ensure_db()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    import asyncio
    async def set_webhook():
        await application.bot.set_webhook(WEBHOOK_URL)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    asyncio.run(set_webhook())

    port = int(os.environ.get("PORT", 10000))
    app_web.run(host="0.0.0.0", port=port)
